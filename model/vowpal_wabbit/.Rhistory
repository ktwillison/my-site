a
b
dot_product <- function(u,v) {
sum(u*v)
}
sd(a)
d1 <- sample(1:6, 10000, replace = TRUE)
dd <- sample(1:6, 10000, replace = TRUE)
d2 <- sample(1:6, 10000, replace = TRUE)
sum_of_dice <- d1 + d2
head(d1)
head(sum_of_dice)
mean(sum_of_dice)
median(sum_of_dice)
symmary(sum_of_dice)
summary(sum_of_dice)
hist(sum_of_dice)
dice <- data.frame(d1, d2, sum_of_dice)
head(dice)
dice[1, "sum_of_dice"]
dice[1,]
dice$product_of_dice <- d1 * d2
head(dice)
mean(dice$product_of_dice)
quit()
getwd()
source('~/.active-rstudio-document')
a
install.packages("dplyr")
install.packages("ggplot.2")
install.packages("ggplot2.")
install.packages("ggplot2.")
install.packages("ggplot2")
c1 <- sample(0:1, 10000, replace = TRUE)
c2 <- sample(0:1, 10000, replace = TRUE)
c3 <- sample(0:1, 10000, replace = TRUE)
num_heads <- c1 + c2 + c3
did_we_get_a_head <- num_heads >= 1
head(did_we_get_a_head)
sum(did_we_get_a_head) / 10000
7/8
data <- data.frame(c1, c2, c3, num_heads, did_we_get_a_head)
head(data)
histogram(dat)
library("ggmap")
install.packages("ggmap")
library("ggmap")
ggplot(quakes,aes(x=long,y=lat)) + geom_point()
ggplot(women, aes(x=height, y=weight) ) + geom_line() +    geom_hline(yintercept = 140) +    scale_x_continuous('Height', limits=c(55,75)) +    scale_y_continuous('Weight')
ggplot(women, aes(x=height, y=weight) ) + geom_line() + geom_hline(yintercept = 140) + scale_x_continuous('Height', limits=c(55,75)) + scale_y_continuous('Weight')
ggplot(quakes,aes(x=long,y=lat)) + geom_point()
ggplot(women, aes(x=height, y=weight) ) + geom_line() + geom_hline(yintercept = 140) + scale_x_continuous('Height', limits=c(55,75)) + scale_y_continuous('Weight')
p <- ggplot(quakes, aes(x=mag))
p <- p + geom_histogram()
p
p <- p + geom_histogram(binwidth=0.1)
p
p <- p + geom_histogram(binwidth=0.1)
p
p <- ggplot(quakes, aes(x=mag))
p <- p + geom_histogram(binwidth=0.1)
p
p <- p + scale_x_continuous("Magnitude", limits=c(4,8), breaks=seq(4,8,1))
p
p <- ggplot(quakes,aes(x=long,y=lat)) + geom_point()
p
p <- p + geom_point(size = 3, color = "blue")
p
p <- p + geom_point(size = 1, aes(color = depth))
p
p <- ggplot(quakes, aes(x=long, y=lat) )
p <- p + geom_point(aes(color = depth, size=mag), alpha = 0.5)
p <- p + geom_hline(yintercept=-16.5, linetype=2)
p <- p + geom_vline(xintercept=179.5, linetype=2)
p <- p + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft")
install.packages("qmap")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft")
library("qmap")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p
head(horsepower)
p <- ggplot(mtcars, aes(x=horsepower, y=mpg))
p
p <- p + geom_point()
p
p <- ggplot(data = mtcars, aes(x=horsepower, y=mpg))
p
p <- p + geom_point()
p
hp
p <- ggplot(data = mtcars, aes(x=hp, y=mpg))
p <- p + geom_point()
p
install.packages(c("dplyr", "nycflights13"))
library("dplyr")
library("nycflights13")
head(flights, n=10)
select(flights, c(carrier, tailnum))
select(flights, -c(carrier, tailnum))
select(flights, carrier, tailnum)
select(flights, startswith("dep"))
select(flights, starts_with("dep"))
mutate(flights, gain = arr_delay - dep_delay, speed = distance / air_time * 60)
select(flights, gain)
flights <- mutate(flights, gain = arr_delay - dep_delay, speed = distance / air_time * 60)
select(flights, gain)
flights <- mutate(flights, gain = arr_delay - dep_delay, gain_per_hour = gain / (air_time / 60))
select(flights, gain)
select(flights, gain_per_hour)
library("flights")
arrange(flights, year, desc(month), desc(day))
flights <- select(flights, -gap)
flights <- select(flights, -gain)
flights <- select(flights, -ggain_per_hourain)
flights <- select(flights, -gain_per_hour)
flight
flights
transmute(flights, ave_speed = distance / air_time * 60) %>% arrange(desc(ave_speed))
flights_by_speed <- mute(flights, ave_speed = distance / air_time * 60) %>% arrange(desc(ave_speed))
flights_by_speed <- mutate(flights, ave_speed = distance / air_time * 60) %>% arrange(desc(ave_speed))
flights_by_speed
dplyr_challenges
source('~/Documents/Stanford/Spring_2015/R/dplyr_challenges.R')
install.packages(c("dplyr", "nycflights13"))
source('~/Documents/Stanford/Spring_2015/R/dplyr_challenges.R')
challenge_1 <- flights %>%
group_by(carrier) %>%
mutate(speed = distance / air_time * 60) %>%
summarise(avg_speed= mean(speed, na.rm = TRUE)) %>%
arrange(desc(avg_speed))
challenge_1
?unif
?runif
runif(100)
rexp
rexp(10)
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
library("ggplot")
p <- ggplot(quakes,aes(x=long,y=lat)) + geom_point()
import.packages("ggplot")
install.packages("ggplot")
library("ggplot")
library("ggplot")
install.packages("ggplot")
library(ggplot)
install.packages(ggplot)
install.packages("ggplot2")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
install.packages("qmap")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
library("ggplot1")
library("ggplot2")
library("qmap")
p <- qmap(location=c(lon=180,lat=-20), zoom = 4, color = "bw", legend = "topleft") + geom_point(data=quakes, aes(x=long, y=lat, color=depth, size=mag), alpha=0.5) + geom_hline(yintercept=-16.5,linetype=2) + geom_vline(xintercept=179.5,linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p <- ggplot(quakes, aes(x=long, y=lat) )p <- p + geom_point(aes(color = depth, size=mag), alpha = 0.5)p <- p + geom_hline(yintercept=-16.5, linetype=2) p <- p + geom_vline(xintercept=179.5, linetype=2) p <- p + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p <- ggplot(quakes, aes(x=long, y=lat) ) + geom_point(aes(color = depth, size=mag), alpha = 0.5) + geom_hline(yintercept=-16.5, linetype=2) + geom_vline(xintercept=179.5, linetype=2) + geom_point(x=179.5, y=-16.5, shape=4, color="darkred", size=3)
p
quakes
head(quakes)
install.packages("dplyr")
library("dplyr")
install.packages(c("dplyr", "nycflights13"))
install.packages(c("dplyr", "nycflights13"))
library("dplyr")
library("nycflights13")
head(nycfligts13)
head("nycfligts13")
head("nycflights13")
head(nycflights13)
nycflights13
flights
challenge_1 <- flights %>%
group_by(carrier) %>%
mutate(speed = distance / air_time * 60) %>%
summarise(avg_speed= mean(speed, na.rm = TRUE)) %>%
arrange(desc(avg_speed))
challenge_1
q()
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
alt_errStd
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
data <- data.fram(U, V)
data <- data.frame(U, V)
data
U
p <- ggplot(data, aes(x=U, y=V)) + geom_point()
p
data <- data.frame(U[,1], V[,1])
data
install.packages("dplyr")
library("dplyr")
U_prime <- c(U[,1], U[,2])
U_prime
V_prime <- c(V[,1], V[,2])
W <- data.frame(U_prime, V_prime)
W
data <- mutate(data, group)
data <- mutate(data, group="group1")
data
data <- mutate(data, group="1")
data
data[6:,3] <- mutate(data[6:,3], group="2")
data[6:10,3] <- mutate(data[6:10,3], group="2")
data[6:10,3]
data[6:,3]
data[6,3]
data
W[6:,3]
W[6:10,3]
W
w <- mutate(w, group="1")
W <- mutate(W, group="1")
W
W[6:10,3] <- mutate(W[6:10,3], group="2")
group <- c(1,1,1,1,1,2,2,2,2,2)
W <- select(W, -group)
W
group
W <- mutate(W, group)
W
W <- group_by(group)
W <- group_by(W, group)
W
p <- ggplot(W,aes(x=U,y=V)) + geom_point()
p
p <- ggplot(W,aes(x=U_prime,y=V_prime)) + geom_point()
p
p <- ggplot(W,aes(x=U_prime,y=V_prime)) + geom_line()
p
p <- ggplot(W,aes(x=U_prime,y=V_prime)) + geom_point()
p
p <- p + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,K))
p
K
seq(0,1,5)
seq(0,1,1/5)
p <- p + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- p + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- p + geom_point(size = 1, aes(color = group))
p
p <- ggplot(W,aes(x=U_prime,y=V_prime, colour = group)) + geom_point()
p
p <- p + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p <- p + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- p + geom_point(size = 3, aes(color = group))
p
group <- c("standard", "standard", "standard", "standard", "standard", "alternate", "alternate", "alternate", "alternate", "alternate")
group
W <- mutate(W, group)
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
U
U <- c(U[,1], U[,2])
U
V <- c(V[,1], V[,2])
V
group <- c("standard", "standard", "standard", "standard", "standard", "alternate", "alternate", "alternate", "alternate", "alternate")
group
W <- data.frame(U, V, group)
W
p <- ggplot(W,aes(x = U, y = V, colour = group)) + geom_point(size=3)
p
p <- p + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K))
p <- p + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
h <- function(x) { return (exp(-(x[1]-0.5)^2-(x[2]-0.5)^2))}
d <- 2
K <- 5
rm(list=ls())
h <- function(x) { return (exp(-(x[1]-0.5)^2-(x[2]-0.5)^2))}
d <- 2
K <- 5
N <- 150
n <- N/K
#standard Monte Carlo
U <- matrix(runif(N*d),N,d)
dim(U)
head(U)
U <- matrix(runif(N*d),nrow=N,ncol=d)
U
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
W
p <- ggplot(W,aes(x = W[,1], y = W[,2])) + geom_point(size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p <- ggplot(W,aes(x = [,1], y = [,2])) + geom_point(size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p <- ggplot(W) + geom_point(size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
W
W <- data.frame(W)
W
p <- ggplot(W,aes(x = X1, y = X2)) + geom_point(size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- ggplot(W,aes(x = X1, y = X2)) + geom_point(colour="2", size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- ggplot(W,aes(x = X1, y = X2)) + geom_point(colour="blue", size=3) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
p <- ggplot(W,aes(x = X1, y = X2)) + geom_point(colour="blue", size=5) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K))
p
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
W
p <- p + theme(panel.grid.major = element_line(colour = "black"))
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
p <- ggplot(W,aes(x = X1, y = X2)) + geom_point(colour="black", size=5, alpha=0.8) + scale_x_continuous("U", limits=c(0,1), breaks=seq(0,1,1/K)) + scale_y_continuous("V", limits=c(0,1), breaks=seq(0,1,1/K)) + theme(panel.grid.major = element_line(colour = "black", linetype = "dotted"))
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
p
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
rm(list=ls())
source('~/Documents/Stanford/Spring_2015/MS&E223-Simulation/HW1/MonteCarlo.R')
std_errStd
alt_errStd
source('~/.active-rstudio-document')
alt_errStd
std_errStd
p
rm(ls=list())
rm(ls=list
###### a)
library(ISLR)
College=read.table("College.data")
```{r}
library(ISLR)
###### a)
```{r}
rm(list = ls())
```{r}
library(ISLR)
install.packages("ISLR")
library(ISLR)
College=read.table("College.data")
fix(College)
head(College)
install.packages("ISLR")
#install.packages("ISLR")
library(ISLR)
College=na.omit(College)
x=model.matrix(Apps~.,College)[,-1]
y=College$Apps
y.test=y[test]
---
title: "CME250 - Assignment 3"
author: "Ron Tidhar - 05960282"
date: "14 May 2015"
output: pdf_document
---
#### Problems Completed:
##### Applied: section 6.8: #9 (a-d), section 8.4: #9
##### Section 6.8: #9 (a-d)
###### a)
First we set up the data to be predicted.
```{r}
```{r}
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
librar(glmnet)
library(glmnet)
install.packages("glmnet")
library(ISLR)
library(glmnet)
College=na.omit(College)
x=model.matrix(Apps~.,College)[,-1]
y=College$Apps
```
Now that we have a model, we can separate the data into training and test sets.
```{r}
set.seed(1)
train=sample(1:nrow(x), nrow(x)/2)
test=(-train)
y.test=y[test]
```
```{r}
library(ISLR)
library(glmnet)
College=na.omit(College)
x=model.matrix(Apps~.,College)[,-1]
y=College$Apps
```
Now that we have a model, we can separate the data into training and test sets.
```{r}
set.seed(1)
train=sample(1:nrow(x), nrow(x)/2)
test=(-train)
y.test=y[test]
```
set.seed(1)
train=sample(1:nrow(x), nrow(x)/2)
test=(-train)
y.test=y[test]
```
###### b)
We fit the data using least squares, and report the test MSE.
```{r}
lm.fit=lm(Apps~., data=College, subset=train)
mean((Apps-predict(lm.fit, College))[test]^2)
mean((College$Apps - predict(lm.fit, College))[test]^2)
cv.out=cv.glmnet(x[train,], y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
set.seed(1)
cv.out=cv.glmnet(x[train,], y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
set.seed(2)
cv.out=cv.glmnet(x[train,], y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
View(x)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
set.seed(2)
cv.out=cv.glmnet(x[train,], y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)[1:18,]
lasso.mod=glmnet(x[train,],y,alpha[train]=1,lambda=grid)
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.out=cv.glmnet(x[train,], y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:18,]
lasso.coef
length(lasso.coef) - length(lasso.coef[lasso.coef!=0])
dim(OJ)
set.seed(1)
train=sample(dim(OJ), 800)
train=sample(dim(OJ)[1], 800)
dim(OJ)[1]
test=(-train)
head(OJ)
set.wd('/Users/rontidhar/Dropbox/CS 229 Wine project/Data')
setwd('/Users/rontidhar/Dropbox/CS 229 Wine project/Data')
df <- read.table('vw_input.txt')
df <- read.table('vw_input.txt', sep='\t')
rm(list = ls())
setwd('/Users/rontidhar/Dropbox/CS 229 Wine project/Data')
df <- read.table('vw_input.txt', sep='\t')
View(df)
setwd('/Users/rontidhar/Dropbox/CS 229 Wine project/vowpal_wabbit')
df <- read.csv('test.csv')
View(df)
source('~/Documents/Stanford/Coursework/Autumn_2015/CS229/Project/RTest.R')
source('~/Documents/Stanford/Coursework/Autumn_2015/CS229/Project/RTest.R')
setwd('/Users/rontidhar/Dropbox/CS 229 Wine project/vowpal_wabbit')
json <- read.csv('test.csv')
word_freq <- fromJSON(json)
word_freq <- fromJSON('test.csv')
setwd('/Users/rontidhar/Dropbox/CS 229 Wine project/vowpal_wabbit')
# json <- read.csv('test.csv')
word_freq <- fromJSON('test.txt')
word_freq
word_freq <- fromJSON('test.txt', simplifyDataFrame=TRUE)
word_freq
word_freq <- fromJSON(['test.txt'], simplifyDataFrame=TRUE)
word_freq <- fromJSON('test copy.txt', simplifyDataFrame=TRUE)
View(word_freq)
View(word_freq)
temp <- fromJSON('test copy.txt', simplifyVector=FALSE)
word_freq <- fromJSON('test.txt', simplifyDataFrame=TRUE)
View(word_freq)
View(word_freq)
temp <- fromJSON('test.txt', simplifyVector=FALSE)
View(word_freq)
View(word_freq)
temp <- fromJSON('test copy.txt', simplifyDataFrame=TRUE)
temp
View(word_freq)
View(word_freq)
source('~/Documents/Stanford/Coursework/Autumn_2015/CS229/Project/RTest.R')
source('~/Documents/Stanford/Coursework/Autumn_2015/CS229/Project/RTest.R')
View(word_freq)
